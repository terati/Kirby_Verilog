
//Atrifex

//ECE385-HelperTools

from PIL import Image
from collections import Counter
from scipy.spatial import KDTree
import numpy as np
def hex_to_rgb(num):
    h = str(num)
    return int(h[0:4], 16), int(('0x' + h[4:6]), 16), int(('0x' + h[6:8]), 16)
def rgb_to_hex(num):
    h = str(num)
    return int(h[0:4], 16), int(('0x' + h[4:6]), 16), int(('0x' + h[6:8]), 16)
filename = input("What's the image name? ")
new_w, new_h = map(int, input("What's the new height x width? Like 28 28. ").split(' '))
palette_hex = ['0x000000', '800000', '008000' ,'808000','000080','800080','008080','808080','c0dcc0','a6caf0','2a3faa','2a3fff','2a5f00','2a5f55','2a5faa','2a5fff',
'2a7f00','2a7f55','2a7faa','2a7fff','2a9f00','2a9f55','2a9faa','2a9fff','2abf00','2abf55','2abfaa','2abfff','2adf00','2adf55','2adfaa','2adfff',
'2aff00','2aff55','2affaa','2affff','550000','550055','5500aa','5500ff','551f00','551f55','551faa','551fff','553f00','553f55','553faa','553fff',
'555f00','555f55','555faa','555fff','557f00','557f55','557faa','557fff','559f00','559f55','559faa','559fff','55bf00','55bf55','55bfaa','55bfff',
'55df00','55df55','55dfaa','55dfff','55ff00','55ff55','55ffaa','55ffff','7f0000','7f0055','7f00aa','7f00ff','7f1f00','7f1f55','7f1faa','7f1fff',
'7f3f00','7f3f55','7f3faa','7f3fff','7f5f00','7f5f55','7f5faa','7f5fff','7f7f00','7f7f55','7f7faa','7f7fff','7f9f00','7f9f55','7f9faa','7f9fff',
'7fbf00','7fbf55','7fbfaa','7fbfff','7fdf00','7fdf55','7fdfaa','7fdfff','7fff00','7fff55','7fffaa','7fffff','aa0000','aa0055','aa00aa','aa00ff',
'aa1f00','aa1f55','aa1faa','aa1fff','aa3f00','aa3f55','aa3faa','aa3fff','aa5f00','aa5f55','aa5faa','aa5fff','aa7f00','aa7f55','aa7faa','aa7fff',
'aa9f00','aa9f55','aa9faa','aa9fff','aabf00','aabf55','aabfaa','aabfff','aadf00','aadf55','aadfaa','aadfff','aaff00','aaff55','aaffaa','aaffff',

'0xd40000','0xd40055','0xd400aa','0xd400ff','0xd41f00','0xd41f55','0xd41faa','0xd41fff','0xd43f00','0xd43f55','0xd43faa','0xd43fff','0xd45f00','0xd45f55','0xd45faa','0xd45fff',
'0xd47f00','0xd47f55','0xd47faa','0xd47fff','0xd49f00','0xd49f55','0xd49faa','0xd49fff','0xd4bf00','0xd4bf55','0xd4bfaa','0xd4bfff','0xd4df00','0xd4df55','0xd4dfaa','0xd4dfff',
'0xd4ff00','0xd4ff55','0xd4ffaa','0xd4ffff','0xff0055','0xff00aa','0xff1f00','0xff1f55','0xff1faa','0xff1fff','0xff3f00','0xff3f55','0xff3faa','0xff3fff','0xff5f00','0xff5f55',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',
'0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x','0x',]
palette_rgb = [hex_to_rgb(color) for color in palette_hex]

pixel_tree = KDTree(palette_rgb)
im = Image.open("./sprite_originals/" + filename+ ".png") #Can be many different formats.
im = im.convert("RGBA")
layer = Image.new('RGBA',(new_w, new_h), (0,0,0,0))
layer.paste(im, (0, 0))
im = layer
#im = im.resize((new_w, new_h),Image.ANTIALIAS) # regular resize
pix = im.load()
pix_freqs = Counter([pix[x, y] for x in range(im.size[0]) for y in range(im.size[1])])
pix_freqs_sorted = sorted(pix_freqs.items(), key=lambda x: x[1])
pix_freqs_sorted.reverse()
print(pix)
outImg = Image.new('RGB', im.size, color='white')
outFile = open("./sprite_bytes/" + filename + '.txt', 'w')
i = 0
for y in range(im.size[1]):
    for x in range(im.size[0]):
        pixel = im.getpixel((x,y))
        print(pixel)
        if(pixel[3] < 200):
            outImg.putpixel((x,y), palette_rgb[0])
            outFile.write("%x\n" %(0))
            print(i)
        else:
            index = pixel_tree.query(pixel[:3])[1]
            outImg.putpixel((x,y), palette_rgb[index])
            outFile.write("%x\n" %(index))
        i += 1
outFile.close()
outImg.save("./sprite_converted/" + filename + ".png" )
Â© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
